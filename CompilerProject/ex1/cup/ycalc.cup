/* ----------------------User code--------------------*/

package src;
import java_cup.runtime.*;

parser code {:
 public void type_error (String context,String message)
    {
        System.err.println("Type Error:"+ "<"+context+">" + message);
        System.exit(1);
    }

 public void sem_error(String context , String message)
    {
     	System.err.println("Semantic Error:"+ "<"+context+">" + message);
        System.exit(1);
    }
:};
   
/* ------------Grammar symbol declarations----------- */
   
terminal                PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, SEMI, EQ, PRINT, IF, THEN,ELSE, WHILE, DO, 
                        BEGIN, END, INT, FLOAT, BOOL, ENDIF, EQUALTO, LESSTHAN, GREATERTHAN,
                        LESSTHANEQ, GREATERTHANEQ, NOTEQUAL, AND, OR, NOT,VOID;
terminal Boolean        BOOLEAN;
terminal Integer        INTEGER;
terminal Float          FLOATING;
terminal String         ID;

non terminal Object    program, function_list;
non terminal Type      type;
non terminal Astat     statement,assignment,statement_part,print,ifthen,while,declaration,functiondecl;
non terminal Lstat     statement_list;
non terminal Aexp      expr, term,factor,logic,comparison;

   
/* ------------Grammar rules----------- */

program   ::= statement_list:s
                {: s.execute(); :}
              |function_list:fl statement_list:s
                {: s.execute(); :};

statement_list ::=   statement_list:l statement_part:s
                        {: RESULT = new Lstat(l,s) ; :}
                     | statement_part:s
                        {: RESULT = new Lstat(s); :};

function_list ::=  function_list:fl functiondecl:fd|
                   functiondecl:fd;

functiondecl ::= VOID ID:i LPAREN RPAREN BEGIN statement_list:s END
                    {: RESULT = Astat.functiondecl(i,s); :};

statement_part ::=   statement:s
                        {: RESULT = s; :}
                     SEMI;

statement    ::= assignment:s
                    {: RESULT = s; :}
                |declaration:s
                    {: RESULT = s; :}
                | print:s
                    {: RESULT = s; :}
                | ifthen:s
                    {: RESULT = s; :}
                | while:s
                    {: RESULT = s; :}
                | BEGIN statement_list:s END
                    {: RESULT = Astat.block(s); :};

declaration ::= type:t ID:i
                    {:  RESULT = Astat.assignment(t, i); :};

assignment   ::= ID:i EQ expr:e
                    {: RESULT = Astat.assignment(i,e); :}
                |type:t ID:i EQ expr:e
                    {: RESULT = Astat.assignment(t, i , e); :};

print  ::= PRINT expr:e
            {: RESULT = Astat.print(e); :};

ifthen ::= IF LPAREN expr:e RPAREN statement:s ENDIF
            {: RESULT = Astat.ifthen(e,s); :}
           |IF LPAREN expr:e RPAREN statement:s1 ELSE statement:s2 ENDIF
            {: RESULT = Astat.ifthenelse(e,s1,s2); :};

while  ::= WHILE LPAREN expr:e RPAREN DO statement:s
            {: RESULT = Astat.whileloop(e,s); :};

type ::= INT
            {: RESULT = new Type().integer();:}
         |FLOAT
            {: RESULT = new Type().floating();:}
         |BOOL
            {:RESULT = new Type().bool();:};
   
expr      ::= expr:e PLUS term:t
                 {: RESULT = new Aexp(new Args(e,t), sym.PLUS); :}
              |expr:e MINUS term:t
                 {: RESULT = new Aexp(new Args(e,t), sym.MINUS); :}
              |term:t
                 {: RESULT = t; :}
              |comparison:c
                 {:RESULT = c; :}
              |logic:l
                 {:RESULT = l; :};


 term    ::= term:t TIMES factor:f
                 {: RESULT = new Aexp(new Args(t,f), sym.TIMES); :}
             |term:t DIVIDE factor:f
                 {: RESULT = new Aexp(new Args(t,f), sym.DIVIDE); :}
             |factor:f
                 {: RESULT = f; :};
             

 comparison   ::= factor:f1 EQUALTO factor:f2
                    {:RESULT = new Aexp(new Args(f1,f2), sym.EQUALTO);:}
                 |factor:f1 LESSTHAN factor:f2
                    {:RESULT = new Aexp(new Args(f1,f2), sym.LESSTHAN);:}
                 |factor:f1 GREATERTHAN factor:f2
                    {:RESULT = new Aexp(new Args(f1,f2), sym.GREATERTHAN);:}
                 |factor:f1 LESSTHANEQ factor:f2
                    {:RESULT = new Aexp(new Args(f1,f2), sym.LESSTHANEQ);:}
                 |factor:f1 GREATERTHANEQ factor:f2
                    {:RESULT = new Aexp(new Args(f1,f2), sym.GREATERTHANEQ);:}
                 |factor:f1 NOTEQUAL factor:f2
                    {:RESULT = new Aexp(new Args(f1,f2), sym.NOTEQUAL);:};

 logic   ::= factor:f1 AND factor:f2
                {:RESULT = new Aexp(new Args(f1,f2), sym.AND);:}
             |factor:f1 OR factor:f2
                {:RESULT = new Aexp(new Args(f1,f2), sym.OR);:}
             |NOT factor:f
                {:RESULT = new Aexp(new OneArg(f), sym.NOT);:};

 factor      ::= LPAREN expr:e RPAREN
                    {: RESULT = e; :}
                 |INTEGER:n
                    {: RESULT = new Aexp(n); :}
                 |FLOATING:fo
                    {: RESULT = new Aexp(fo); :}
                 |ID:i
                    {: RESULT = new Aexp(i); :}
                 |BOOLEAN:m
                    {: RESULT = new Aexp(m); :};

